import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../provider/dpr_provider.dart';
import '../provider/analysis_provider.dart';
import 'analysis_screen.dart';

/// Minimal, clean HomeScreen to avoid analyzer failures.
class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Dashboard')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Welcome back', style: Theme.of(context).textTheme.headlineSmall),
            const SizedBox(height: 12),
            Row(children: [
              ElevatedButton(
                onPressed: () async {
                  await context.read<DPRProvider>().loadDemo();
                  ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Demo DPRs loaded')));
                },
                child: const Text('Load Demo DPRs'),
              ),
              const SizedBox(width: 12),
              ElevatedButton(onPressed: () => _openRunAnalysisPanel(context), child: const Text('Run Analysis')),
            ]),
            const SizedBox(height: 16),
            const Text('Recent DPRs'),
            const SizedBox(height: 8),
            Expanded(
              child: Consumer<DPRProvider>(builder: (context, prov, _) {
                final list = prov.dprs;
                if (list.isEmpty) return const Center(child: Text('No DPRs'));
                return ListView.builder(
                  itemCount: list.length,
                  itemBuilder: (_, i) {
                    final d = list[i];
                    return ListTile(
                      title: Text(d.title),
                      subtitle: Text('${d.state} • ${d.type} • ${d.budget}'),
                      trailing: ElevatedButton(
                        onPressed: () async {
                          final r = await context.read<AnalysisProvider>().analyzeDocument(title: d.title, docType: d.type, comment: d.notes ?? '');
                          if (r != null) Navigator.of(context).push(MaterialPageRoute(builder: (_) => AnalysisScreen(result: r)));
                        },
                        child: const Text('Analyze'),
                      ),
                    );
                  },
                );
              }),
            ),
          ],
        ),
      ),
    );
  }

  void _openRunAnalysisPanel(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (ctx) => DraggableScrollableSheet(
        expand: false,
        initialChildSize: 0.6,
        minChildSize: 0.3,
        maxChildSize: 0.95,
        builder: (_, controller) => Padding(
          padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
          child: RunAnalysisSheet(scrollController: controller),
        ),
      ),
    );
  }
}

class RunAnalysisSheet extends StatefulWidget {
  final ScrollController? scrollController;
  const RunAnalysisSheet({Key? key, this.scrollController}) : super(key: key);

  @override
  State<RunAnalysisSheet> createState() => _RunAnalysisSheetState();
}

class _RunAnalysisSheetState extends State<RunAnalysisSheet> {
  String? _selectedState;
  String? _selectedStatus;
  final TextEditingController _minBudgetCtrl = TextEditingController();
  final TextEditingController _maxBudgetCtrl = TextEditingController();
  bool _running = false;
  List<dynamic> _results = [];

  List<String> _statesFrom(BuildContext ctx) {
    final dprs = ctx.read<DPRProvider>().dprs;
    final s = dprs.map((e) => e.state).toSet().toList();
    s.sort();
    return s;
  }

  double? _parseBudgetValue(String? input) {
    if (input == null) return null;
    if (input.trim().isEmpty) return null;
    final s = input.trim().toLowerCase();
    final crMatch = RegExp(r'([0-9.]+)\\s*(cr|crore|crores)').firstMatch(s);
    if (crMatch != null) return (double.tryParse(crMatch.group(1)!) ?? 0) * 10000000;
    final lMatch = RegExp(r'([0-9.]+)\\s*(l|lac|lakh|lakhs)').firstMatch(s);
    if (lMatch != null) return (double.tryParse(lMatch.group(1)!) ?? 0) * 100000;
    final numOnly = double.tryParse(s.replaceAll(RegExp(r'[^0-9.]'), ''));
    return numOnly;
  }

  List<dynamic> _applyFilters(BuildContext ctx) {
    final list = ctx.read<DPRProvider>().dprs;
    double? minB = _parseBudgetValue(_minBudgetCtrl.text);
    double? maxB = _parseBudgetValue(_maxBudgetCtrl.text);
    return list.where((d) {
      if (_selectedState != null && _selectedState!.isNotEmpty && d.state != _selectedState) return false;
      if (_selectedStatus != null && _selectedStatus!.isNotEmpty && d.status != _selectedStatus) return false;
      final numStr = d.budget.replaceAll(RegExp(r'[^0-9.]'), '');
      final b = double.tryParse(numStr);
      final dLower = d.budget.toLowerCase();
      double? dBudget = b;
      if (dLower.contains('cr') || dLower.contains('crore')) {
        dBudget = (b != null) ? b * 10000000 : null;
      } else if (dLower.contains('l') || dLower.contains('lac') || dLower.contains('lakh')) {
        dBudget = (b != null) ? b * 100000 : null;
      }
      if (minB != null && (dBudget == null || dBudget < minB)) return false;
      if (maxB != null && (dBudget == null || dBudget > maxB)) return false;
      return true;
    }).toList();
  }

  Future<void> _runAnalysis(BuildContext ctx) async {
    setState(() {
      _running = true;
      _results = [];
    });
    final list = _applyFilters(ctx);
    final provider = ctx.read<AnalysisProvider>();
    for (final d in list) {
      final r = await provider.analyzeDocument(title: d.title, docType: d.type, comment: d.notes ?? '');
      if (r != null) _results.add(r);
    }
    setState(() {
      _running = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final states = _statesFrom(context);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text('Run Analysis', style: Theme.of(context).textTheme.titleLarge),
              IconButton(icon: const Icon(Icons.close), onPressed: () => Navigator.of(context).pop()),
            ],
          ),
          const SizedBox(height: 8),
          Wrap(spacing: 8, runSpacing: 8, children: [
            DropdownButton<String>(
              hint: const Text('State'),
              value: _selectedState ?? '',
              items: [
                const DropdownMenuItem(value: '', child: Text('Any')),
                ...states.map((s) => DropdownMenuItem(value: s, child: Text(s))).toList()
              ],
              onChanged: (v) => setState(() => _selectedState = (v == '') ? null : v),
            ),
            SizedBox(
              width: 160,
              child: TextField(controller: _minBudgetCtrl, decoration: const InputDecoration(labelText: 'Min Budget', hintText: 'e.g. 2 Cr or 50 L')),
            ),
          ]),
          const SizedBox(height: 12),
          Row(children: [
            ElevatedButton.icon(
              onPressed: (_running || _applyFilters(context).isEmpty) ? null : () => _runAnalysis(context),
              icon: const Icon(Icons.play_arrow),
              label: Text(_running ? 'Running...' : 'Analyze'),
            ),
            const SizedBox(width: 12),
            TextButton(
              onPressed: () {
                setState(() {
                  _selectedState = null;
                  _selectedStatus = null;
                  _minBudgetCtrl.clear();
                  _maxBudgetCtrl.clear();
                  _results = [];
                });
              },
              child: const Text('Reset'),
            ),
          ]),
          const SizedBox(height: 12),
          if (_running) const LinearProgressIndicator(),
          if (_results.isNotEmpty) ...[
            const SizedBox(height: 12),
            Text('Summary', style: Theme.of(context).textTheme.titleMedium),
            const SizedBox(height: 8),
            Builder(builder: (_) {
              final avgCompliance = _results.map((r) => (r.complianceScore ?? 0.0)).fold(0.0, (a, b) => a + b) / _results.length;
              final highRisk = _results.where((r) => (r.riskScore ?? 0.0) > 70).length;
              final mismatches = _results.where((r) => (r.mismatchedBudgets ?? []).isNotEmpty).length;
              return Text('Analyzed ${_results.length} DPRs • Avg compliance: ${avgCompliance.toStringAsFixed(1)}% • High risk: $highRisk • Budget mismatches: $mismatches');
            }),
          ],
        ],
      ),
    );
  }
}
